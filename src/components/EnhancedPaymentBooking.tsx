import React, { useState } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon, CreditCard, Loader2 } from "lucide-react";
import { format } from "date-fns";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useCurrency } from "@/contexts/CurrencyContext";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

const bookingSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  phone: z.string().min(8, "Phone number required"),
  pickup: z.string().min(3, "Pickup location required"),
  dropoff: z.string().min(3, "Drop-off location required"),
  pickupDate: z.date({ message: "Pickup date required" }),
  pickupTime: z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, "Invalid time format"),
  flightNumber: z.string().optional(),
  passengers: z.number().min(1).max(8),
  luggage: z.number().min(0).max(20),
  notes: z.string().optional(),
  basePriceEUR: z.number().min(1, "Price required"),
});

type BookingFormData = z.infer<typeof bookingSchema>;

interface EnhancedPaymentBookingProps {
  basePriceEUR: number;
  route?: string;
}

const EnhancedPaymentBooking: React.FC<EnhancedPaymentBookingProps> = ({ 
  basePriceEUR,
  route = "Transfer"
}) => {
  const { currency, calculateDeposit, flatEurUplift } = useCurrency();
  const { toast } = useToast();
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState<'paypal' | 'revolut' | null>(null);

  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm<BookingFormData>({
    resolver: zodResolver(bookingSchema),
    defaultValues: {
      basePriceEUR,
      passengers: 1,
      luggage: 1,
    }
  });

  const pickupDate = watch('pickupDate');
  const depositInfo = calculateDeposit(basePriceEUR, currency);

  const onSubmit = async (data: BookingFormData, method: 'paypal' | 'revolut') => {
    setIsProcessing(true);
    setPaymentMethod(method);

    try {
      const pickupDatetime = new Date(data.pickupDate);
      const [hours, minutes] = data.pickupTime.split(':');
      pickupDatetime.setHours(parseInt(hours), parseInt(minutes));

      const bookingData = {
        name: data.name,
        email: data.email,
        phone: data.phone,
        pickup: data.pickup,
        dropoff: data.dropoff,
        pickupDatetime: pickupDatetime.toISOString(),
        flightNumber: data.flightNumber,
        passengers: data.passengers,
        luggage: data.luggage,
        notes: data.notes,
        route: route || `${data.pickup} â†’ ${data.dropoff}`,
      };

      // Create payment order
      const functionName = method === 'paypal' ? 'create-paypal-order' : 'create-revolut-order';
      
      const { data: orderData, error: orderError } = await supabase.functions.invoke(functionName, {
        body: {
          depositAmount: depositInfo.deposit,
          currency: currency,
          bookingData: {
            ...bookingData,
            reference: '', // Will be generated by booking
          },
        },
      });

      if (orderError) throw orderError;

      // Store booking data in session storage for completion page
      sessionStorage.setItem('pendingBooking', JSON.stringify({
        bookingData,
        depositInfo: {
          ...depositInfo,
          currency,
        },
        paymentMethod: method,
        orderId: orderData.orderId,
      }));

      // Redirect to payment
      const redirectUrl = method === 'paypal' ? orderData.approvalUrl : orderData.checkoutUrl;
      window.location.href = redirectUrl;

    } catch (error: any) {
      console.error('Payment initiation error:', error);
      toast({
        title: "Payment Failed",
        description: error.message || "Unable to initiate payment. Please try again.",
        variant: "destructive",
      });
      setIsProcessing(false);
      setPaymentMethod(null);
    }
  };

  return (
    <Card className="p-6 max-w-2xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">Complete Your Booking</h2>
      
      <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-6">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm text-gray-600 dark:text-gray-400">Total Fare (inc. â‚¬{flatEurUplift} service fee):</span>
          <span className="font-semibold">{currency}{depositInfo.total.toFixed(currency === 'TND' ? 0 : 2)}</span>
        </div>
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-semibold text-blue-600">Deposit Due Now (25%):</span>
          <span className="text-lg font-bold text-blue-600">{currency}{depositInfo.deposit.toFixed(currency === 'TND' ? 0 : 2)}</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-sm text-gray-600 dark:text-gray-400">Balance Due on Pickup:</span>
          <span className="font-semibold">{currency}{depositInfo.balance.toFixed(currency === 'TND' ? 0 : 2)}</span>
        </div>
        <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
          ðŸ’¡ Prices converted from EUR base rate
        </p>
      </div>

      <form className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="name">Full Name *</Label>
            <Input {...register('name')} placeholder="John Doe" />
            {errors.name && <p className="text-sm text-red-500">{errors.name.message}</p>}
          </div>
          
          <div>
            <Label htmlFor="email">Email *</Label>
            <Input {...register('email')} type="email" placeholder="john@example.com" />
            {errors.email && <p className="text-sm text-red-500">{errors.email.message}</p>}
          </div>
        </div>

        <div>
          <Label htmlFor="phone">Phone / WhatsApp *</Label>
          <Input {...register('phone')} placeholder="+216 XX XXX XXX" />
          {errors.phone && <p className="text-sm text-red-500">{errors.phone.message}</p>}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="pickup">Pickup Location *</Label>
            <Input {...register('pickup')} placeholder="e.g., Tunis Airport" />
            {errors.pickup && <p className="text-sm text-red-500">{errors.pickup.message}</p>}
          </div>
          
          <div>
            <Label htmlFor="dropoff">Drop-off Location *</Label>
            <Input {...register('dropoff')} placeholder="e.g., Hammamet Hotel" />
            {errors.dropoff && <p className="text-sm text-red-500">{errors.dropoff.message}</p>}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label>Pickup Date *</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-full justify-start text-left">
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {pickupDate ? format(pickupDate, 'PPP') : 'Select date'}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={pickupDate}
                  onSelect={(date) => setValue('pickupDate', date as Date)}
                  disabled={(date) => date < new Date()}
                />
              </PopoverContent>
            </Popover>
            {errors.pickupDate && <p className="text-sm text-red-500">{errors.pickupDate.message}</p>}
          </div>
          
          <div>
            <Label htmlFor="pickupTime">Pickup Time *</Label>
            <Input {...register('pickupTime')} type="time" />
            {errors.pickupTime && <p className="text-sm text-red-500">{errors.pickupTime.message}</p>}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <Label htmlFor="flightNumber">Flight Number</Label>
            <Input {...register('flightNumber')} placeholder="Optional" />
          </div>
          
          <div>
            <Label htmlFor="passengers">Passengers *</Label>
            <Input {...register('passengers', { valueAsNumber: true })} type="number" min="1" max="8" />
          </div>
          
          <div>
            <Label htmlFor="luggage">Luggage *</Label>
            <Input {...register('luggage', { valueAsNumber: true })} type="number" min="0" max="20" />
          </div>
        </div>

        <div>
          <Label htmlFor="notes">Additional Notes</Label>
          <Textarea {...register('notes')} placeholder="Any special requests?" rows={3} />
        </div>

        <div className="flex gap-4 mt-6">
          <Button
            type="button"
            onClick={handleSubmit((data) => onSubmit(data, 'paypal'))}
            disabled={isProcessing}
            className="flex-1 bg-[#0070ba] hover:bg-[#003087]"
          >
            {isProcessing && paymentMethod === 'paypal' ? (
              <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Processing...</>
            ) : (
              <><CreditCard className="mr-2 h-4 w-4" /> Pay with PayPal</>
            )}
          </Button>
          
          <Button
            type="button"
            onClick={handleSubmit((data) => onSubmit(data, 'revolut'))}
            disabled={isProcessing}
            className="flex-1 bg-[#000000] hover:bg-[#333333]"
          >
            {isProcessing && paymentMethod === 'revolut' ? (
              <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Processing...</>
            ) : (
              <><CreditCard className="mr-2 h-4 w-4" /> Pay with Revolut</>
            )}
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default EnhancedPaymentBooking;